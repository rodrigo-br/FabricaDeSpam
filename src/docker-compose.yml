version: '3.4'

services:
  kafka:
    image: docker.io/bitnami/kafka:3.5
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
      - ./config/server.properties:/etc/kafka/server.properties
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_MESSAGE_MAX_BYTES=500000000
    networks:
      - cavalinho
    restart: always

  init-kafka:
    networks:
      - cavalinho
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic cat_mobile --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic cat_email --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic dog_mobile --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic dog_email --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "

  webapi:
    networks:
      - cavalinho
    env_file:
      - ../.env
    depends_on:
      - kafka
      - producer
    build:
      context: ./
      dockerfile: WebApi.Dockerfile
    ports:
      - 5002:80
    restart: always

  consumer:
    build:
      context: ./
      dockerfile: Consumer.Dockerfile
    networks:
      - cavalinho
    restart: always
     
  producer:
    build:
      context: ./
      dockerfile: Producer.Dockerfile
    networks:
      - cavalinho
    restart: always

  webapp:
     env_file:
        - ../.env
     build:
       context: ./
       dockerfile: WebApp.Dockerfile
     networks:
       - cavalinho
     restart: always
     ports:
       - 80:80
       - 443:443

  postgresdb:
    image: postgres
    env_file:
      - ../.env
    volumes:
      - ./dbdata:/var/lib/postgresql/data
      - type: bind
        source: ./config/dump.sql
        target: /docker-entrypoint-initdb.d/dump.sql
    networks:
      - cavalinho
    ports:
      - 5432:5432
    expose:
      - "5432"
    restart: always

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks:
      - cavalinho

volumes:
  kafka_data:
    driver: local

networks:
  cavalinho:
    driver: bridge


